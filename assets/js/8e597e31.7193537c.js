"use strict";(self.webpackChunkdocs_reservebtc_io=self.webpackChunkdocs_reservebtc_io||[]).push([[896],{8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var t=i(6540);const r={},s=t.createContext(r);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(s.Provider,{value:n},e.children)}},9688:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"smart-contract/minting","title":"\ud83e\ude99 Minting Logic","description":"How rBTC-SYNTH tokens are issued based on verified BTC reserves.","source":"@site/docs/smart-contract/minting.md","sourceDirName":"smart-contract","slug":"/smart-contract/minting","permalink":"/smart-contract/minting","draft":false,"unlisted":false,"editUrl":"https://github.com/reservebtc/docs.reservebtc.io/edit/main/docs/smart-contract/minting.md","tags":[],"version":"current","frontMatter":{"title":"\ud83e\ude99 Minting Logic","slug":"/smart-contract/minting","description":"How rBTC-SYNTH tokens are issued based on verified BTC reserves.","sidebar_label":"Minting"},"sidebar":"tutorialSidebar","previous":{"title":"Smart Contract Overview","permalink":"/smart-contract"},"next":{"title":"Burning","permalink":"/smart-contract/burning"}}');var r=i(4848),s=i(8453);const l={title:"\ud83e\ude99 Minting Logic",slug:"/smart-contract/minting",description:"How rBTC-SYNTH tokens are issued based on verified BTC reserves.",sidebar_label:"Minting"},c=void 0,a={},d=[{value:"Overview",id:"overview",level:2},{value:"\ud83e\uddee Minting Conditions",id:"-minting-conditions",level:2},{value:"\u2699\ufe0f Smart Contract Minting Logic",id:"\ufe0f-smart-contract-minting-logic",level:2},{value:"\u2795 Dynamic Minting",id:"-dynamic-minting",level:2},{value:"\u2705 Example:",id:"-example",level:2},{value:"\ud83d\udd12 Anti-Fraud Protections",id:"-anti-fraud-protections",level:2},{value:"\ud83d\udd0d View Functions",id:"-view-functions",level:2},{value:"\ud83d\udee0\ufe0f Next:",id:"\ufe0f-next",level:2}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The minting process of ",(0,r.jsx)(n.code,{children:"**rBTC-SYNTH**"})," is triggered only after a user successfully verifies their BTC holdings through ReserveBTC\u2019s system."]}),"\n",(0,r.jsx)(n.p,{children:"This logic ensures that:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tokens are minted only in response to real BTC deposits."}),"\n",(0,r.jsx)(n.li,{children:"Users cannot mint tokens arbitrarily."}),"\n",(0,r.jsx)(n.li,{children:"The system is automatic, verifiable, and resistant to fraud."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-minting-conditions",children:"\ud83e\uddee Minting Conditions"}),"\n",(0,r.jsxs)(n.p,{children:["A synthetic token is minted ",(0,r.jsx)(n.strong,{children:"only if"})," all of the following are true:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The user has submitted their BTC and ETH addresses to ",(0,r.jsx)(n.a,{href:"https://www.reservebtc.io",children:"ReserveBTC.io"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"A unique verification BTC address and checksum amount were generated."}),"\n",(0,r.jsxs)(n.li,{children:["The user sent ",(0,r.jsx)(n.strong,{children:"exactly the assigned BTC amount"})," to the verification address."]}),"\n",(0,r.jsx)(n.li,{children:"The system detected the correct transaction."}),"\n",(0,r.jsx)(n.li,{children:"The ETH address is valid and stored."}),"\n",(0,r.jsx)(n.li,{children:"The BTC reserve has not already been minted."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 Once verified, the system triggers the ",(0,r.jsx)(n.code,{children:"mint()"})," function inside the smart contract."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-smart-contract-minting-logic",children:"\u2699\ufe0f Smart Contract Minting Logic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-solidity",children:'function reportVerifiedBalance(address ethAddress, uint256 amountBtc) external onlyOracle {\n    require(!_alreadyMinted[ethAddress], "Already minted");\n    _mint(ethAddress, amountBtc);\n    _alreadyMinted[ethAddress] = true;\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The reportVerifiedBalance function can only be called by the Chainlink Oracle."}),"\n",(0,r.jsx)(n.li,{children:"The ETH address can only be minted once (soulbound model)."}),"\n",(0,r.jsx)(n.li,{children:"If the BTC balance grows over time, additional minting is allowed (see below)."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-dynamic-minting",children:"\u2795 Dynamic Minting"}),"\n",(0,r.jsx)(n.p,{children:"If the same BTC address is topped up later:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The backend re-verifies the new total balance."}),"\n",(0,r.jsx)(n.li,{children:"Only the delta is minted."}),"\n",(0,r.jsxs)(n.li,{children:["The new amount is added to the ETH holder\u2019s existing ",(0,r.jsx)(n.code,{children:"rBTC-SYNTH"})," balance."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-example",children:"\u2705 Example:"}),"\n",(0,r.jsx)(n.p,{children:"If initially 0.25 BTC was verified, and later the address receives 0.10 more BTC:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-solidity",children:"0.25 BTC \u2192 0.25 rBTC-SYNTH  \n+0.10 BTC \u2192 +0.10 rBTC-SYNTH  \nFinal balance: 0.35 rBTC-SYNTH\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-anti-fraud-protections",children:"\ud83d\udd12 Anti-Fraud Protections"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Only the Oracle can trigger minting. Users cannot call the function directly."}),"\n",(0,r.jsx)(n.li,{children:"One-time mint lock per address (unless verified delta increases)."}),"\n",(0,r.jsx)(n.li,{children:"Checksum enforcement: exact match required to prevent random sends."}),"\n",(0,r.jsx)(n.li,{children:"No manual input: All triggers are automated."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-view-functions",children:"\ud83d\udd0d View Functions"}),"\n",(0,r.jsx)(n.p,{children:"DApps and DeFi protocols can read minted balances using:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-solidity",children:"function balanceOf(address ethUser) external view returns (uint256);\n"})}),"\n",(0,r.jsx)(n.p,{children:"No approvals, no transfers, no delegated minting \u2014 fully soulbound."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-next",children:"\ud83d\udee0\ufe0f Next:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/smart-contract/burning",children:"Burning Mechanism"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/smart-contract/oracle",children:"Oracle Integration"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/smart-contract/security",children:"Security Checklist"})}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Mint on proof. No keys. No permission. Just Bitcoin."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);